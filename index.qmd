---
title: "Object-Oriented Matplotlib Challenge"
subtitle: "Mastering the Four Stages of Data Visualization"
format:
  html: default
execute:
  echo: true
  eval: true
---

# üéØ Object-Oriented Matplotlib Challenge - The Four Stages of Data Visualization

::: {.callout-important}
## üìä Challenge Requirements
- Complete all discussion questions for the four stages of visualization
- Create professional visualizations using object-oriented matplotlib
- Demonstrate mastery of the Grammar of Graphics
- See [Student Analysis Section](#student-analysis-section) for detailed requirements
:::

## The Problem: Mastering Object-Oriented Matplotlib Through the Four Stages

**Core Question:** How can we create compelling, professional data visualizations using object-oriented matplotlib and the four stages of visualization?

**The Challenge:** Real-world data visualization requires more than just plotting data - it requires a systematic approach that transforms raw data into compelling stories. The four stages framework provides a proven methodology for creating visualizations that inform, persuade, and inspire action.

**Our Approach:** We'll work with baseball stadium data to investigate whether Coors Field in Denver, Colorado is truly the most run-friendly ballpark in Major League Baseball. This investigation will take us through all four stages of visualization, demonstrating object-oriented matplotlib techniques along the way.

::: {.callout-warning}
## ‚ö†Ô∏è AI Partnership Required

This challenge pushes boundaries intentionally. You'll tackle problems that normally require weeks of study, but with Cursor AI as your partner (and your brain keeping it honest), you can accomplish more than you thought possible.

**The new reality:** The four stages of competence are Ignorance ‚Üí Awareness ‚Üí Learning ‚Üí Mastery. AI lets us produce Mastery-level work while operating primarily in the Awareness stage. I focus on awareness training, you leverage AI for execution, and together we create outputs that used to require years of dedicated study.
:::

## The Four Stages of Data Visualization

The four essential stages for creating effective visualizations are:

1. **Stage 1: Declaration of Purpose** - Define your message and audience
2. **Stage 2: Curation of Content** - Gather and create all necessary data
3. **Stage 3: Structuring of Visual Mappings** - Choose geometry and aesthetics
4. **Stage 4: Formatting for Your Audience** - Polish for professional presentation

## Data and Business Context

We analyze Major League Baseball stadium data to investigate whether Coors Field in Denver, Colorado is truly the most run-friendly ballpark. This dataset is ideal for our analysis because:

- **Real Business Question:** Sports analysts and fans want to understand stadium effects on scoring
- **Clear Hypothesis:** High altitude should make Coors Field more run-friendly
- **Multiple Metrics:** We can analyze both total runs and home runs
- **Visualization Practice:** Perfect for demonstrating all four stages of visualization

## Data Loading and Initial Exploration

Let's start by loading the baseball data and understanding what we're working with.

```{python}
#| label: load-data
#| echo: true
#| message: false
#| warning: false

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import seaborn as sns

# Load 2010 baseball season data
df2010 = pd.read_csv("baseball10.csv")

# Load 2021 baseball season data for comparison
df2021 = pd.read_csv("baseball21.csv")

print("2010 data shape:", df2010.shape)
print("2021 data shape:", df2021.shape)
print("\n2010 data columns:", df2010.columns.tolist())
print("\nFirst few rows of 2010 data:")
print(df2010.head())
```

::: {.callout-note}
## üí° Understanding the Data

**Baseball Game Data:** Contains information about each game, including:
- `home`: Home team (3-letter code)
- `visiting`: Visiting team (3-letter code)
- `homeScore`: Runs scored by home team
- `visScore`: Runs scored by visiting team
- `homeHR`: Home runs by home team
- `visHR`: Home runs by visiting team
- `date`: Game date

**Business Questions We'll Answer:**
1. Is Coors Field (COL) the most run-friendly ballpark in 2010?
2. How does this change in 2021?
3. What's the difference between total runs and home runs by stadium?
:::

## Stage 1: Declaration of Purpose

**Mental Model:** Start with a clear message and bold title that states your recommendation.

Our purpose is to investigate whether Coors Field in Denver, Colorado is truly the most run-friendly baseball stadium in Major League Baseball.

::: {.callout-important}
## ü§î Discussion Questions: Stage 1 - Declaration of Purpose

**Question 1: Hypothesis Formation**
- Why might high altitude affect baseball performance?  Is Coors Field affected by high altitude?
High altitude can affect baseball performance because the air is thinner at higher altitudes, which can cause the ball to travel farther. This can make it more difficult for hitters to hit the ball hard, and it can also make it more difficult for pitchers to throw the ball hard.

Yes, Coors Field is affected by high altitude, and it is the most run-friendly baseball stadium in Major League Baseball because it is affected by high altitude.
:::

## Stage 2: Curation of Content

**Mental Model:** Gather and create all the data you need to support your message.

Let's aggregate the data to get average runs per stadium:

```{python}
#| label: stage-2-content
#| echo: true

# Stage 2: Curation of Content
# Aggregate data to get average runs per stadium

# Process 2010 data
avgDF_2010 = (df2010
    .assign(totalRuns = lambda df: df.homeScore + df.visScore)
    .assign(totalHR = lambda df: df.homeHR + df.visHR)
    .drop(columns = ['date', 'visiting'])
    .groupby(['home'], as_index=False)
    .mean()
)

# Process 2021 data
avgDF_2021 = (df2021
    .assign(totalRuns = lambda df: df.homeScore + df.visScore)
    .assign(totalHR = lambda df: df.homeHR + df.visHR)
    .drop(columns = ['date', 'visiting'])
    .groupby(['home'], as_index=False)
    .mean()
)

print("2010 Stadium Averages (Top 5):")
print(avgDF_2010.head())
print("\n2021 Stadium Averages (Top 5):")
print(avgDF_2021.head())
```

::: {.callout-important}
## ü§î Discussion Questions: Stage 2 - Curation of Content

**Question 1: Data Aggregation Strategy**
- How many games are in the dataset? Why do we aggregate individual games into stadium averages before we start the visualization process?

```{python}
#| echo: true
#| message: false
#| warning: false

print("2010 data shape:", df2010.shape)
print("2021 data shape:", df2021.shape)
print("\n2010 data columns:", df2010.columns.tolist())
print("\nFirst few rows of 2010 data:")
print(df2010.head())
```

There are total of 4859 games from 2010 and 2021 seasons. 
2430 games in 2010 and 2429 games in 2021.


```{python}
#| echo: true
#| message: false
#| warning: false

home_run_2010 = df2010.groupby('home').size().sort_values(ascending=False)
print(home_run_2010.head(3))

home_run_2021 = df2021.groupby('home').size().sort_values(ascending=False)
print(home_run_2021.head(3))
```

Aggregating the data into stadium averages allows us to see the average number of runs and home runs scored by each stadium in a given year. This is helpful because it allows us to compare the performance of different stadiums and see which stadium is the most run-friendly.

  * Reduces noise 
  * Shows true pattern
  * Cleaner Data and Visualization

:::

## Stage 3: Structuring of Visual Mappings

**Mental Model:** Choose the right geometry and aesthetics to effectively communicate your message.

Let's explore different visual approaches:

```{python}
#| label: stage-3-mapping-exploration
#| echo: true

# Stage 3: Structuring of Visual Mappings
# Explore different geometries and aesthetics

# Sort data for better visualization
avgDF_2010_sorted = avgDF_2010.sort_values('totalRuns', ascending=True)

# Create figure with subplots to compare approaches
fig, axes = plt.subplots(2, 2, figsize=(8, 6))

# Approach 1: Scatter plot (not ideal for categorical data)
axes[0,0].scatter(avgDF_2010_sorted.home, avgDF_2010_sorted.totalRuns)
axes[0,0].set_title("Approach 1: Scatter Plot")
axes[0,0].set_xlabel("Stadium")
axes[0,0].set_ylabel("Average Runs")

# Approach 2: Horizontal bar chart (better for categorical data)
axes[0,1].barh(avgDF_2010_sorted.home, avgDF_2010_sorted.totalRuns)
axes[0,1].set_title("Approach 2: Horizontal Bar Chart")
axes[0,1].set_xlabel("Average Runs")
axes[0,1].set_ylabel("Stadium")

# Approach 3: Vertical bar chart
axes[1,0].bar(avgDF_2010_sorted.home, avgDF_2010_sorted.totalRuns)
axes[1,0].set_title("Approach 3: Vertical Bar Chart")
axes[1,0].set_xlabel("Stadium")
axes[1,0].set_ylabel("Average Runs")
axes[1,0].tick_params(axis='x', rotation=45)

# Approach 4: Highlight Colorado
colorado_colors = ["darkorchid" if stadium == "COL" else "lightgrey" 
                   for stadium in avgDF_2010_sorted.home]
axes[1,1].barh(avgDF_2010_sorted.home, avgDF_2010_sorted.totalRuns, color=colorado_colors)
axes[1,1].set_title("Approach 4: Highlight Colorado")
axes[1,1].set_xlabel("Average Runs")
axes[1,1].set_ylabel("Stadium")

plt.tight_layout()
plt.show()
```

::: {.callout-important}
## ü§î Discussion Questions: Stage 3 - Structuring of Visual Mappings

**Question 1: Geometry Choices**
- Why is a horizontal bar chart better than a scatter plot for this data? When would you choose a vertical bar chart over horizontal?

**Answer:**
  * A horizontal bar chart is better than a scatter plot for this data because it allows us to see the average number of runs and home runs scored by each stadium in a given year. 
  * This is helpful because it allows us to compare the performance of different stadiums and see which stadium is the most run-friendly.
  * A vertical bar chart is better than a horizontal bar chart for this data because it allows us to see the average number of runs and home runs scored by each stadium in a given year. 
  * It is helpful because it allows us to compare the performance of different stadiums and see which stadium is the most run-friendly.

**Question 2: Aesthetic Mappings**
- What does the color highlighting accomplish in Approach 4?

The color highlighting in Approach 4 accomplishes the following:
* It highlights the Colorado Rockies (COL) stadium in a different color than the other stadiums.
* It helps us to see that Colorado is the most run-friendly stadium in Major League Baseball.

- How does position (x/y) compare to color for encoding data?

Position (x/y) is better than color for encoding data because it allows us to see the average number of runs and home runs scored by each stadium in a given year. This is helpful because it allows us to compare the performance of different stadiums and see which stadium is the most run-friendly.

:::

## Stage 4: Formatting for Your Audience

**Mental Model:** Polish your visualization for professional presentation.

Let's create a publication-ready visualization:

```{python}
#| label: stage-4-formatting
#| echo: true

# Stage 4: Formatting for Your Audience
# Create a professional, publication-ready visualization

# Set style for professional appearance
plt.style.use("seaborn-v0_8-whitegrid")

# Create the main visualization
fig, ax = plt.subplots(figsize=(8, 6))

# Create color array for highlighting Colorado
colorado_colors = ["darkorchid" if stadium == "COL" else "lightgrey" 
                   for stadium in avgDF_2010_sorted.home]

# Create horizontal bar chart
bars = ax.barh(avgDF_2010_sorted.home, avgDF_2010_sorted.totalRuns, color=colorado_colors)

# Add title and labels
ax.set_title("Colorado (COL) is the Most Run-Friendly Ballpark in 2010", 
             fontsize=16, fontweight='bold', pad=20)
ax.set_xlabel("Average Runs Per Game", fontsize=12)
ax.set_ylabel("Stadium (Home Team)", fontsize=12)

# Add legend
colorado_bar = plt.Rectangle((0,0),1,1, color="darkorchid", label="Colorado Rockies")
other_bar = plt.Rectangle((0,0),1,1, color="lightgrey", label="Other Stadiums")
ax.legend(handles=[colorado_bar, other_bar], loc='lower right', frameon=True)

# Add annotation for Colorado
colorado_index = avgDF_2010_sorted[avgDF_2010_sorted.home == "COL"].index[0]
colorado_runs = avgDF_2010_sorted[avgDF_2010_sorted.home == "COL"]["totalRuns"].iloc[0]
ax.annotate(f"COL: {colorado_runs:.2f} runs/game", 
            xy=(colorado_runs, colorado_index), 
            xytext=(colorado_runs + 0.5, colorado_index),
            arrowprops=dict(arrowstyle='->', color='darkorchid', lw=2),
            fontsize=10, fontweight='bold', color='darkorchid')

# Set x-axis to start from 0 for better comparison
ax.set_xlim(0, max(avgDF_2010_sorted.totalRuns) * 1.1)

# Add grid for easier reading
ax.grid(True, alpha=0.3)

plt.tight_layout()
plt.show()

# Print summary statistics
print(f"\nSummary Statistics for 2010:")
print(f"Colorado (COL) average runs per game: {colorado_runs:.2f}")
print(f"League average runs per game: {avgDF_2010_sorted.totalRuns.mean():.2f}")
print(f"Colorado is {((colorado_runs / avgDF_2010_sorted.totalRuns.mean()) - 1) * 100:.1f}% above league average")
```

::: {.callout-important}
## ü§î Discussion Questions: Stage 4 - Formatting for Your Audience

**Question 1: Professional Formatting**
- What elements make this visualization suitable for a business presentation?
**Answer:**
The elements that make this visualization suitable for a business presentation are:
* The title is clear and concise.
* The x-axis is labeled "Average Runs Per Game".
* The y-axis is labeled "Stadium (Home Team)".
* The legend is clear and concise.
* The annotation is helpful and is placed in a good location.

- Is the annotation on the visualization helpful?  Can you fix its placement?
The annotation is helpful and is placed in a good location. It is helpful because it allows us to see that Colorado is the most run-friendly stadium in Major League Baseball.
It can be fixed by placing it in a better location.

*** Fix the annotation placement ***

```{python}
#| echo: true
#| message: false
#| warning: false

# Fix the annotation placement
ax.annotate(f"COL: {colorado_runs:.2f} runs/game", 
            xy=(colorado_runs, colorado_index), 
            xytext=(colorado_runs + 0.5, colorado_index),
            arrowprops=dict(arrowstyle='->', color='darkorchid', lw=2),
            fontsize=10, fontweight='bold', color='darkorchid')

# Improved annotation placement
fig, ax = plt.subplots(figsize=(7, 5))

# Create the visualization with improved annotation
colorado_colors = ["darkorchid" if stadium == "COL" else "lightgrey" 
                   for stadium in avgDF_2010_sorted.home]

bars = ax.barh(avgDF_2010_sorted.home, avgDF_2010_sorted.totalRuns, color=colorado_colors)

# Professional formatting
ax.set_title("Colorado (COL) is the Most Run-Friendly Ballpark in 2010", 
             fontsize=14, fontweight='bold', pad=15)
ax.set_xlabel("Average Runs Per Game", fontsize=10)
ax.set_ylabel("Stadium (Home Team)", fontsize=10)

# Add legend
colorado_bar = plt.Rectangle((0,0),1,1, color="darkorchid", label="Colorado Rockies")
other_bar = plt.Rectangle((0,0),1,1, color="lightgrey", label="Other Stadiums")
ax.legend(handles=[colorado_bar, other_bar], loc='lower right', frameon=True, fontsize=9)

# Improved annotation placement - Colorado is at the top (highest runs)
colorado_runs = avgDF_2010_sorted[avgDF_2010_sorted.home == "COL"]["totalRuns"].iloc[0]
# Find Colorado's position in the y-axis (stadium list)
colorado_y_position = list(avgDF_2010_sorted.home).index("COL")

# Position annotation in the margin for better readability (avoiding title overlap)
ax.annotate(f"COL leads with\n{colorado_runs:.2f} runs/game", 
            xy=(colorado_runs, colorado_y_position), 
            xytext=(colorado_runs + 1.2, colorado_y_position - 1.5),
            arrowprops=dict(arrowstyle='->', color='darkorchid', lw=2),
            fontsize=9, fontweight='bold', color='darkorchid',
            bbox=dict(boxstyle="round,pad=0.3", facecolor="white", edgecolor="darkorchid", alpha=0.8))

ax.set_xlim(0, max(avgDF_2010_sorted.totalRuns) * 1.2)
ax.grid(True, alpha=0.3)

plt.tight_layout()
plt.show()

```
  * The annotation is now placed in a better location.
  * It is helpful because it allows us to see that Colorado is the most run-friendly stadium in Major League Baseball.
:::


## Advanced Object-Oriented Techniques

**Mental Model:** Use object-oriented matplotlib to create complex, reusable visualizations.

Let's create a comprehensive comparison between 2010 and 2021:

```{python}
#| label: advanced-oo-techniques
#| echo: true

# Advanced Object-Oriented Techniques
# Create a comprehensive comparison visualization

# Prepare data for comparison
comparison_data = pd.merge(
    avgDF_2010[['home', 'totalRuns']].rename(columns={'totalRuns': 'runs_2010'}),
    avgDF_2021[['home', 'totalRuns']].rename(columns={'totalRuns': 'runs_2021'}),
    on='home', how='inner'
)

# Create two-facet visualization comparing 2010 and 2021 for each stadium
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 5))

# Sort each dataset by its own runs (ascending for horizontal bar charts)
data_2010_sorted = comparison_data.sort_values('runs_2010', ascending=True)
data_2021_sorted = comparison_data.sort_values('runs_2021', ascending=True)

# Create color array for highlighting Colorado
colorado_colors_2010 = ["darkorchid" if stadium == "COL" else "lightgrey" 
                   for stadium in data_2010_sorted.home]

colorado_colors_2021 = ["darkorchid" if stadium == "COL" else "lightgrey" 
                   for stadium in data_2021_sorted.home]

# Create horizontal bar chart
bars1_2010 = ax1.barh(data_2010_sorted.home, data_2010_sorted.runs_2010, color=colorado_colors_2010)

bars2_2021 = ax2.barh(data_2021_sorted.home, data_2021_sorted.runs_2021, color=colorado_colors_2021)

# Add title and labels
ax1.set_title("Total Runs for 2010")
ax1.set_xlabel("Average Runs Per Game", fontsize=10)
ax1.set_ylabel("Stadium (Home Team)", fontsize=10)
ax1.grid(True, alpha=0.3)

ax2.set_title("Total Runs for 2021")
ax2.set_xlabel("Average Runs Per Game", fontsize=10)
ax2.set_ylabel("Stadium (Home Team)", fontsize=10)
ax2.grid(True, alpha=0.3)

# Get Colorado values for statistics (annotation removed for cleaner view)
colorado_runs_2010 = data_2010_sorted[data_2010_sorted.home == "COL"]["runs_2010"].iloc[0]
colorado_runs_2021 = data_2021_sorted[data_2021_sorted.home == "COL"]["runs_2021"].iloc[0]


# Set consistent x-axis limits for fair comparison
max_runs = max(data_2010_sorted.runs_2010.max(), data_2021_sorted.runs_2021.max())
ax1.set_xlim(0, max_runs * 1.1)
ax2.set_xlim(0, max_runs * 1.1)

# Add legend
colorado_bar = plt.Rectangle((0,0),1,1, color="darkorchid", label="Colorado Rockies")
other_bar = plt.Rectangle((0,0),1,1, color="lightgrey", label="Other Stadiums")

# update legend position to display in the bottom center of the figure after the plots are created
fig.legend(handles=[colorado_bar, other_bar], loc='lower center', frameon=True, fontsize=9, ncol=2)

# Add title
plt.suptitle("Total Runs for 2010 and 2021 for Each Stadium")

# Show the visualization
plt.tight_layout()
plt.subplots_adjust(bottom=0.15)  # Make room for legend at bottom
plt.show()

# Print comparison statistics
print(f"\nColorado Performance Comparison:")
print(f"2010: {colorado_runs_2010:.2f} runs/game")
print(f"2021: {colorado_runs_2021:.2f} runs/game")
print(f"Change: {colorado_runs_2021 - colorado_runs_2010:+.2f} runs/game")
print(f"League Average 2010: {data_2010_sorted.runs_2010.mean():.2f}")
print(f"League Average 2021: {data_2021_sorted.runs_2021.mean():.2f}")
print(f"Colorado is {((colorado_runs_2021 / data_2021_sorted.runs_2021.mean()) - 1) * 100:.1f}% above league average in 2021")
print(f"Colorado is {((colorado_runs_2010 / data_2010_sorted.runs_2010.mean()) - 1) * 100:.1f}% above league average in 2010")


```

::: {.callout-important}
## ü§î Discussion Questions: Advanced Object-Oriented Techniques

**Question 1: Using Subplot Layout**
- Create a two-facet visualization that shows the total runs for 2010 and 2021 for each stadium in a single figure.  Highlight Colorado in the visualization.
Answer: Created the visualization and it is shown above.


**Question 2: Explanation of the Visualization**
- Ask AI To Add A Paragraph Here To Explain The Visualization

- **Summary of the Visualization:**
  This side-by-side comparison reveals Colorado's dominant run-friendliness across 2010 and 2021. Coors Field consistently leads all MLB stadiums in average runs per game, confirming its altitude advantage as the most hitter-friendly ballpark in baseball. The visualization ranks every stadium by total runs, showing not just Colorado's position, but the entire league's spectrum‚Äîfrom the highest-scoring environments (coinciding with Colorado) down to the most pitcher-friendly parks. By tracking both years, we can identify which teams' home parks rank closest to Colorado (high-run environments) versus those furthest away (low-run, pitcher-friendly parks). The gap between Colorado and league average reveals the magnitude of Coors Field's scoring advantage, while the overall distribution shows how teams are distributed across the scoring spectrum. This comparison across 2010 vs 2021 helps reveal era effects, rule changes, and competitive balance shifts that impact league-wide run rates over time.
  
  **Notable Stadium Comparisons:**
  - **Camden Yards (Orioles)**: Known as one of baseball's most influential modern ballparks, Camden Yards typically ranks near the middle of the run-friendliness spectrum. Its dimensions and design create a relatively neutral environment for scoring compared to Colorado's extreme altitude advantage. This makes it an interesting benchmark when evaluating whether Colorado's scoring environment is truly exceptional versus simply above-average.
  - **Fenway Park (Red Sox)**: One of baseball's most iconic venues, Fenway's unusual dimensions and Green Monster create a unique scoring profile. Located near the bottom of the run-friendliness rankings (being a pitcher-friendly park), Fenway provides a sharp contrast to Colorado‚Äîshowing how ballpark design can significantly suppress scoring despite being in a hitter-friendly era. This comparison between Fenway (low-run) and Colorado (high-run) illustrates the dramatic range of scoring environments across MLB stadiums.
  
- Does AI come to the right conclusion? If not, why not?
Initially, the AI explained about plot and more of technical plot explantion than games and stadium aspects; 
After giving more context and instructions, the AI came to the better conclusion. 
AI initially was not coming to the right conclusion because it was not given enough context and instructions. 


:::

## Student Analysis Section: Mastering Object-Oriented Matplotlib {#student-analysis-section}

**Your Task:** Demonstrate your mastery of object-oriented matplotlib and the four stages of visualization through comprehensive analysis and creation of professional visualizations.

### Core Challenge: Four Stages Analysis

**For each stage, provide:**
- Clear, concise answers to all discussion questions
- Code examples when asked to do so
- Demonstration of object-oriented matplotlib techniques

### Professional Visualizations (For 100% Grade)

**Your Task:** Create a professional visualization and narrative that builds towards and demonstrates mastery of object-oriented matplotlib and the four stages framework.

**Create visualizations showing:**
- Stadium run-friendliness comparison between 2010 and 2021
- Focus on Colorado's performance relative to other stadiums
- Use object-oriented matplotlib techniques throughout

**Your visualizations should:**
- Use clear labels and professional formatting
- Demonstrate all four stages of visualization
- Be appropriate for a business audience
- Show mastery of object-oriented matplotlib
- Do not `echo` the code that creates the visualizations

## Getting Started: Repository Setup üöÄ

::: {.callout-important}
## üìÅ Getting Started

**Step 1:** Fork and clone this challenge repository: `https://github.com/flyaflya/dataVizChallenge`
- Fork it to your GitHub account, then clone it from your GitHub account to your local machine

**Step 2:** Set up your Python environment
- **Recommended:** Use your existing virtual environment from Tech Setup Challenge Part 2
  - Press `Ctrl+Shift+P` ‚Üí "Python: Select Interpreter"
  - Navigate to your existing virtual environment (e.g., `your-previous-project/venv/Scripts/python.exe`)
  - Install additional packages: `pip install pandas numpy matplotlib seaborn`
- **Alternative:** Create a new virtual environment following [Quarto documentation](https://quarto.org/docs/projects/virtual-environments.html)

**Step 3:** You're ready to start! The data loading code and starter code for the visualizations are already provided in this file.

**Note:** This challenge uses the same `index.qmd` file you're reading right now - you'll edit it to complete your analysis.
:::

::: {.callout-warning}
## ‚ö†Ô∏è Cloud Storage Warning

**Avoid using Google Drive, OneDrive, or other cloud storage for Python projects!** These services can cause issues with package installations and virtual environment corruption. Keep your Python projects in a local folder like `C:\Users\YourName\Documents\` instead.
:::

::: {.callout-note}
## üéØ Object-Oriented Matplotlib Philosophy

*Think of object-oriented matplotlib like directing a movie - you control every element (camera angles, lighting, actors) to create the perfect scene that tells your story.*
:::

::: {.callout-warning}
## üíæ Important: Save Your Work Frequently!

**Before you start:** Make sure to commit your work often using the Source Control panel in Cursor (Ctrl+Shift+G or Cmd+Shift+G). This prevents the AI from overwriting your progress and ensures you don't lose your work.

**Commit after each major step:**
- After completing each stage section
- After adding your visualizations
- After completing your advanced object-oriented techniques
- Before asking the AI for help with new code

**How to commit:**
1. Open Source Control panel (Ctrl+Shift+G)
2. Stage your changes (+ button)
3. Write a descriptive commit message
4. Click the checkmark to commit

*Remember: Frequent commits are your safety net!*
:::

## Grading Rubric üéì

**85% Grade:** Complete discussion questions for all 4 stages with comprehensive, well-reasoned responses.

**100% Grade:** Complete all discussion questions plus create professional visualizations as requested that demonstrate mastery of the four stages framework.

## Submission Checklist ‚úÖ

**Minimum Requirements (Required for Any Points):**

- [ ] Fork repository named "dataVizChallenge" to your GitHub account
- [ ] Clone repository locally using Cursor (or VS Code)
- [ ] Completed discussion questions for at least 3 of the 4 stages
- [ ] Document rendered to HTML successfully
- [ ] HTML files uploaded to your repository
- [ ] GitHub Pages enabled and working
- [ ] Site accessible at `https://jp-balakrishnan.github.io/dataVizChallenge/`

**85% Grade Requirements:**

- [ ] Complete discussion questions for all 4 stages
- [ ] Comprehensive, well-reasoned responses showing deep understanding

**100% Grade Requirements:**

- [ ] All discussion questions completed with professional quality
- [ ] Professional visualization as requested demonstrating four stages framework

**Report Quality (Critical for Higher Grades):**

- [ ] Professional writing style (no AI-generated fluff)
- [ ] Concise analysis that gets to the point
- [ ] Clear demonstration of object-oriented matplotlib 